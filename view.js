/**
 * Backbone.js View Example
 *
 * Views in Backbone.js are responsible for rendering the UI elements and handling user interactions.
 * They connect to DOM elements and can listen for events like clicks, form submissions, etc.
 *
 * Key components of a Backbone View:
 * - el: The DOM element that the view will be rendered in
 * - initialize: Function called when the view is first created
 * - render: Function responsible for rendering the view's content
 * - template: Often used to define the HTML structure (not explicitly defined here)
 * - events: Object mapping DOM events to handler functions (not used in this example)
 */
var firstView = Backbone.View.extend({
  // Specifies which DOM element this view will be attached to
  el: "#container",

  // Called automatically when a new instance of the view is created
  initialize: function () {
    // Calls the render method when the view is initialized
    this.render();
  },

  // Responsible for rendering the view's content
  render: function () {
    // this.$el is a cached jQuery object for the view's element
    // this.template() would call a template function to generate HTML
    // Note: template() is not defined in this file, so this would cause an error if instantiated
    this.$el.html(this.template());
  },
});

/**
 * Example usage (not included in this file):
 *
 * // Define a template function first
 * firstView.prototype.template = _.template('<h1>Hello <%= name %></h1>');
 *
 * // Create a new instance of the view
 * var view = new firstView();
 *
 * Expected Output:
 * - The #container element in the DOM would be filled with the HTML generated by the template
 * - If the template returned "<h1>Hello World</h1>", that would be inserted into the #container element
 */
